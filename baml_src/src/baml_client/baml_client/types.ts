/*************************************************************************************************

Welcome to Baml! To use this generated code, please run one of the following:

$ npm install @boundaryml/baml
$ yarn add @boundaryml/baml
$ pnpm add @boundaryml/baml

*************************************************************************************************/

// This file was generated by BAML: do not edit it. Instead, edit the BAML
// files and re-generate this code.
//
/* eslint-disable */
// tslint:disable
// @ts-nocheck
// biome-ignore format: autogenerated code
import type { Image, Audio } from "@boundaryml/baml"

/**
 * Recursively partial type that can be null.
 *
 * @deprecated Use types from the `partial_types` namespace instead, which provides type-safe partial implementations
 * @template T The type to make recursively partial.
 */
export type RecursivePartialNull<T> = T extends object
    ? { [P in keyof T]?: RecursivePartialNull<T[P]> }
    : T | null;

export interface Checked<T,CheckName extends string = string> {
    value: T,
    checks: Record<CheckName, Check>,
}


export interface Check {
    name: string,
    expr: string
    status: "succeeded" | "failed"
}

export function all_succeeded<CheckName extends string>(checks: Record<CheckName, Check>): boolean {
    return get_checks(checks).every(check => check.status === "succeeded")
}

export function get_checks<CheckName extends string>(checks: Record<CheckName, Check>): Check[] {
    return Object.values(checks)
}
export enum EventSourceType {
  AUDIO_EMOTION = "AUDIO_EMOTION",
  AUDIO_SPEECH_FEATURES = "AUDIO_SPEECH_FEATURES",
  FACIAL_EXPRESSION = "FACIAL_EXPRESSION",
  BODY_POSE_GESTURE = "BODY_POSE_GESTURE",
  GAZE_DIRECTION = "GAZE_DIRECTION",
  PHYSIOLOGICAL_SENSOR = "PHYSIOLOGICAL_SENSOR",
  VISUAL_ANALYSIS = "VISUAL_ANALYSIS",
}

export enum SpeakerType {
  PATIENT = "PATIENT",
  THERAPIST = "THERAPIST",
}

export interface Dialogue {
  turns: DialogueTurn[]
  
}

export interface DialogueTurn {
  speaker: SpeakerType
  utterance: string
  timestamp_ms?: number | null
  events: ModalityEvent[]
  
}

export interface EvidencePointer {
  turn_index: number
  source: EventSourceType
  event_index: number
  
}

export interface EvidenceReference {
  summary: string
  pointers?: EvidencePointer[] | null
  
}

export interface KeyMoment {
  turn_index: number
  description: string
  dialogue_snippet?: string | null
  relevant_events: ModalityEvent[]
  image_correlation_notes?: string | null
  
}

export interface ModalityEvent {
  source: EventSourceType
  description: string
  confidence?: number | null
  
}

export interface PatientImageTurn {
  turn_index: number
  image: string
  
}

export interface SessionAnalysis {
  overall_summary: string
  identified_themes: SessionTheme[]
  key_moments: KeyMoment[]
  therapeutic_observations: TherapeuticObservation[]
  
}

export interface SessionTheme {
  theme: string
  evidence_turn_indices: number[]
  evidence_summary?: string | null
  
}

export interface TherapeuticObservation {
  turn_index: number
  observation: string
  evidence?: EvidenceReference | null
  
}

export interface TurnSpecificVisualEvents {
  turn_index: number
  visual_events: ModalityEvent[]
  
}

export interface TurnSpecificVisualObservations {
  turn_index: number
  visual_observations: VisualObservation[]
  
}

export interface VisualObservation {
  description: string
  confidence?: number | null
  
}
