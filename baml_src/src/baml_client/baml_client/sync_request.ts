/*************************************************************************************************

Welcome to Baml! To use this generated code, please run one of the following:

$ npm install @boundaryml/baml
$ yarn add @boundaryml/baml
$ pnpm add @boundaryml/baml

*************************************************************************************************/

// This file was generated by BAML: do not edit it. Instead, edit the BAML
// files and re-generate this code.
//
/* eslint-disable */
// tslint:disable
// @ts-nocheck
// biome-ignore format: autogenerated code
import type { BamlRuntime, BamlCtxManager, ClientRegistry, Image, Audio } from "@boundaryml/baml"
import { toBamlError, HTTPRequest } from "@boundaryml/baml"
import type { Checked, Check } from "./types"
import type * as types from "./types"
import type {Dialogue, DialogueTurn, EventSourceType, EvidencePointer, EvidenceReference, KeyMoment, ModalityEvent, PatientImageTurn, SessionAnalysis, SessionTheme, SpeakerType, TherapeuticObservation, TurnSpecificVisualEvents, TurnSpecificVisualObservations, VisualObservation} from "./types"
import type TypeBuilder from "./type_builder"

type BamlCallOptions = {
  tb?: TypeBuilder
  clientRegistry?: ClientRegistry
}

export class HttpRequest {
  constructor(private runtime: BamlRuntime, private ctxManager: BamlCtxManager) {}

  
  AnalyzeSessionMultimodal(
      dialogue: Dialogue,background_context: string,
      __baml_options__?: BamlCallOptions
  ): HTTPRequest {
    try {
      return this.runtime.buildRequestSync(
        "AnalyzeSessionMultimodal",
        {
          "dialogue": dialogue,"background_context": background_context
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        false,
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  AnalyzeVisualInput(
      dialogue: Dialogue,background_context: string,patient_turn_images?: PatientImageTurn[] | null,
      __baml_options__?: BamlCallOptions
  ): HTTPRequest {
    try {
      return this.runtime.buildRequestSync(
        "AnalyzeVisualInput",
        {
          "dialogue": dialogue,"background_context": background_context,"patient_turn_images": patient_turn_images?? null
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        false,
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  SynthesizeTherapySession(
      background_context: string,session_length_minutes: number,
      __baml_options__?: BamlCallOptions
  ): HTTPRequest {
    try {
      return this.runtime.buildRequestSync(
        "SynthesizeTherapySession",
        {
          "background_context": background_context,"session_length_minutes": session_length_minutes
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        false,
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  SynthesizeVisualEvents(
      background_context: string,dialogue: Dialogue,
      __baml_options__?: BamlCallOptions
  ): HTTPRequest {
    try {
      return this.runtime.buildRequestSync(
        "SynthesizeVisualEvents",
        {
          "background_context": background_context,"dialogue": dialogue
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        false,
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
}

export class HttpStreamRequest {
  constructor(private runtime: BamlRuntime, private ctxManager: BamlCtxManager) {}

  
  AnalyzeSessionMultimodal(
      dialogue: Dialogue,background_context: string,
      __baml_options__?: BamlCallOptions
  ): HTTPRequest {
    try {
      return this.runtime.buildRequestSync(
        "AnalyzeSessionMultimodal",
        {
          "dialogue": dialogue,"background_context": background_context
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        true,
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  AnalyzeVisualInput(
      dialogue: Dialogue,background_context: string,patient_turn_images?: PatientImageTurn[] | null,
      __baml_options__?: BamlCallOptions
  ): HTTPRequest {
    try {
      return this.runtime.buildRequestSync(
        "AnalyzeVisualInput",
        {
          "dialogue": dialogue,"background_context": background_context,"patient_turn_images": patient_turn_images?? null
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        true,
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  SynthesizeTherapySession(
      background_context: string,session_length_minutes: number,
      __baml_options__?: BamlCallOptions
  ): HTTPRequest {
    try {
      return this.runtime.buildRequestSync(
        "SynthesizeTherapySession",
        {
          "background_context": background_context,"session_length_minutes": session_length_minutes
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        true,
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  SynthesizeVisualEvents(
      background_context: string,dialogue: Dialogue,
      __baml_options__?: BamlCallOptions
  ): HTTPRequest {
    try {
      return this.runtime.buildRequestSync(
        "SynthesizeVisualEvents",
        {
          "background_context": background_context,"dialogue": dialogue
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        true,
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
}